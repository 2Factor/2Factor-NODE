/**
 * 2factor
 *
 * This file was automatically generated for 2Factor by APIMATIC BETA v2.0 on 02/18/2016
 */

var request = require('../Http/Client/RequestClient'),
    configuration = require('../configuration'),
    APIHelper = require('../APIHelper');

var VOICEOTPController = {

    /**
     * This endpoint is used to check VOICE OTP balance
     * @param {string} apiKey    Required parameter: Check VOICE OTP Balance
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {CheckVoiceBalanceModel}
     */
    getCheckVoiceBalance : function(apiKey, callback){
        //Assign default values
        apiKey = apiKey || "Get one from http://2Factor.in";

        //prepare query string for API call;
        var baseUri = configuration.BASEURI;
        
        var queryBuilder = baseUri + "/API/V1/{api_key}/BAL/VOICE";
        
        //Process template parameters
        queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
            "api_key" : apiKey
        });

        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "accept" : "application/json"
        };

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "GET",
            headers: headers,
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,JSON.parse(response.body),context);
            }else{
                //Error handling using HTTP status codes
                callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
            }
        }
        request(options, cb);
        
    },


    /**
     * This endpoint is used to send Auto Generated VOICE OTP to India
     * @param {string} apiKey    Required parameter: API Obtained From 2Factor.in
     * @param {string} phoneNumber    Required parameter: 10 Digit Indian Phone Number
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {SendingVoiceOtpAutoGeneratedOtpModel}
     */
    getSendingVOICEOTPAutoGeneratedOTP : function(apiKey, phoneNumber, callback){
        //Assign default values
        apiKey = apiKey || "Get one from http://2Factor.in";
        phoneNumber = phoneNumber || "9911991199";

        //prepare query string for API call;
        var baseUri = configuration.BASEURI;
        
        var queryBuilder = baseUri + "/API/V1/{api_key}/VOICE/{phone_number}/AUTOGEN";
        
        //Process template parameters
        queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
            "api_key" : apiKey,
            "phone_number" : phoneNumber
        });

        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "accept" : "application/json"
        };

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "GET",
            headers: headers,
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,JSON.parse(response.body),context);
            }else{
                //Error handling using HTTP status codes
                callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
            }
        }
        request(options, cb);
        
    },


    /**
     * This endpoint is used to send VOICE OTP to India
     * @param {string} apiKey    Required parameter: API Obtained From 2Factor.in
     * @param {int} otp    Required parameter: 4 Digit ( Numeric ) OTP code to be sent
     * @param {string} phoneNumber    Required parameter: 10 Digit Indian Phone Number
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {SendingVoiceOtpModel}
     */
    getSendingVoiceOTPCustomOTP : function(apiKey, otp, phoneNumber, callback){
        //Assign default values
        apiKey = apiKey || "Get one from http://2Factor.in";
        otp = otp || 4499;
        phoneNumber = phoneNumber || "9911991199";

        //prepare query string for API call;
        var baseUri = configuration.BASEURI;
        
        var queryBuilder = baseUri + "/API/V1/{api_key}/VOICE/{phone_number}/{otp}";
        
        //Process template parameters
        queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
            "api_key" : apiKey,
            "otp" : otp,
            "phone_number" : phoneNumber
        });

        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "accept" : "application/json"
        };

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "GET",
            headers: headers,
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,JSON.parse(response.body),context);
            }else{
                //Error handling using HTTP status codes
                callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
            }
        }
        request(options, cb);
        
    },


    /**
     * This endpoint is useful in verifying user entered OTP with sent OTP
     * @param {string} apiKey    Required parameter: API Obtained From 2Factor.in
     * @param {string} otpInput    Required parameter: OTP Value input by end user
     * @param {string} sessionId    Required parameter: Verification session id returned in send OTP step
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {VerifyVoiceOtpInputModel}
     */
    getVerifyVOICEOTPInput : function(apiKey, otpInput, sessionId, callback){
        //Assign default values
        apiKey = apiKey || "Get one from http://2Factor.in";
        otpInput = otpInput || "1234";
        sessionId = sessionId || "4a4b52d9-be3e-4f2c-b66e-f4141091b876";

        //prepare query string for API call;
        var baseUri = configuration.BASEURI;
        
        var queryBuilder = baseUri + "/API/V1/{api_key}/VOICE/VERIFY/{session_id}/{otp_input}";
        
        //Process template parameters
        queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
            "api_key" : apiKey,
            "otp_input" : otpInput,
            "session_id" : sessionId
        });

        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "accept" : "application/json"
        };

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "GET",
            headers: headers,
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,JSON.parse(response.body),context);
            }else{
                //Error handling using HTTP status codes
                callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
            }
        }
        request(options, cb);
        
    }

};

module.exports = VOICEOTPController;